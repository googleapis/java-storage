custom_content: |
  ## About Storage Control
  
  The [Storage Control API](https://cloud.google.com/storage/docs/reference/rpc/) lets you perform metadata-specific, control plane, and long-running operations.
  
  The Storage Control API creates one space to perform metadata-specific, control plane, and long-running operations apart from the Storage API. Separating these operations from the Storage API improves API standardization and lets you run faster releases.
  
  If you are using Maven with [BOM][libraries-bom], add this to your pom.xml file:
  ```xml
  <dependencyManagement>
      <dependencies>
          <dependency>
              <groupId>com.google.cloud</groupId>
              <artifactId>libraries-bom</artifactId>
              <version>26.37.0</version>
              <type>pom</type>
              <scope>import</scope>
          </dependency>
      </dependencies>
  </dependencyManagement>
  
  <dependencies>
      <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-storage-control</artifactId>
  </dependency>
  ```
  
  If you are using Maven without the BOM, add this to your dependencies:
  <!-- {x-version-update-start:google-cloud-storage:released} -->
  ```xml
  <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-storage-control</artifactId>
      <version>2.40.1</version><!-- {x-version-update:google-cloud-storage-control:current} -->
  </dependency>
  ```
  
  If you are using Gradle 5.x or later, add this to your dependencies:
  ```Groovy
  implementation platform('com.google.cloud:libraries-bom:2.40.1')
  implementation 'com.google.cloud:google-cloud-storage-control'
  ```
  If you are using Gradle without BOM, add this to your dependencies:
  
  ```Groovy
  implementation 'com.google.cloud:google-cloud-storage-control:2.40.1' <!-- {x-version-update:google-cloud-storage-control:current} -->
  ```
  
  #### Creating an authorized service object

  To make authenticated requests to Google Cloud Storage, you must create a service object with credentials. You can
  then make API calls by calling methods on the Storage service object. The simplest way to authenticate is to use
  [Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials).
  These credentials are automatically inferred from your environment, so you only need the following code to create your
  service object:

  ```java
  import com.google.cloud.storage.Storage;
  import com.google.cloud.storage.StorageOptions;

  Storage storage = StorageOptions.getDefaultInstance().getService();
  ```

  For other authentication options, see the [Authentication](https://github.com/googleapis/google-cloud-java#authentication) page in Google Cloud Java.

  #### Storing data
  Stored objects are called "blobs" in `google-cloud` and are organized into containers called "buckets".  `Blob`, a
  subclass of `BlobInfo`, adds a layer of service-related functionality over `BlobInfo`.  Similarly, `Bucket` adds a
  layer of service-related functionality over `BucketInfo`.  In this code snippet, we will create a new bucket and
  upload a blob to that bucket.

  Add the following imports at the top of your file:

  ```java
  import static java.nio.charset.StandardCharsets.UTF_8;

  import com.google.cloud.storage.Blob;
  import com.google.cloud.storage.Bucket;
  import com.google.cloud.storage.BucketInfo;
  ```

  Then add the following code to create a bucket and upload a simple blob.

  *Important: Bucket names have to be globally unique (among all users of Cloud Storage). If you choose a bucket name
  that already exists, you'll get a helpful error message telling you to choose another name. In the code below, replace
  "my_unique_bucket" with a unique bucket name. See more about naming rules
  [here](https://cloud.google.com/storage/docs/bucket-naming?hl=en#requirements).*

  ```java
  // Create a bucket
  String bucketName = "my_unique_bucket"; // Change this to something unique
  Bucket bucket = storage.create(BucketInfo.of(bucketName));

  // Upload a blob to the newly created bucket
  BlobId blobId = BlobId.of(bucketName, "my_blob_name");
  BlobInfo blobInfo = BlobInfo.newBuilder(blobId).setContentType("text/plain").build();
  Blob blob = storage.create(blobInfo, "a simple blob".getBytes(UTF_8));
  ```

  A complete example for creating a blob can be found at
  [UploadObject.java](https://github.com/googleapis/java-storage/blob/main/samples/snippets/src/main/java/com/example/storage/object/UploadObject.java).

  At this point, you will be able to see your newly created bucket and blob on the Google Developers Console.

  #### Retrieving data
  Now that we have content uploaded to the server, we can see how to read data from the server.  Add the following line
  to your program to get back the blob we uploaded.

  ```java
  BlobId blobId = BlobId.of(bucketName, "my_blob_name");
  byte[] content = storage.readAllBytes(blobId);
  String contentString = new String(content, UTF_8);
  ```

  A complete example for accessing blobs can be found at
  [DownloadObject.java](https://github.com/googleapis/java-storage/blob/main/samples/snippets/src/main/java/com/example/storage/object/DownloadObject.java).

  #### Updating data
  Another thing we may want to do is update a blob. The following snippet shows how to update a Storage blob if it exists.

  ``` java
  BlobId blobId = BlobId.of(bucketName, "my_blob_name");
  Blob blob = storage.get(blobId);
  if (blob != null) {
    byte[] prevContent = blob.getContent();
    System.out.println(new String(prevContent, UTF_8));
    WritableByteChannel channel = blob.writer();
    channel.write(ByteBuffer.wrap("Updated content".getBytes(UTF_8)));
    channel.close();
  }
  ```

  #### Listing buckets and contents of buckets
  Suppose that you've added more buckets and blobs, and now you want to see the names of your buckets and the contents
  of each one. Add the following code to list all your buckets and all the blobs inside each bucket.

  ```java
  // List all your buckets
  System.out.println("My buckets:");
  for (Bucket bucket : storage.list().iterateAll()) {
    System.out.println(bucket);

    // List all blobs in the bucket
    System.out.println("Blobs in the bucket:");
    for (Blob blob : bucket.list().iterateAll()) {
      System.out.println(blob);
    }
  }
  ```

  #### Complete source code

  See [ListObjects.java](https://github.com/googleapis/java-storage/blob/main/samples/snippets/src/main/java/com/example/storage/object/ListObjects.java) for a complete example.

  ### Example Applications

  - [`Bookshelf`](https://github.com/GoogleCloudPlatform/getting-started-java/tree/main/bookshelf) - An App Engine application that manages a virtual bookshelf.
    - This app uses `google-cloud` to interface with Cloud Datastore and Cloud Storage. It also uses Cloud SQL, another Google Cloud Platform service.
  - [`Flexible Environment/Storage example`](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/main/flexible/cloudstorage) - An app that uploads files to a public Cloud Storage bucket on the App Engine Flexible Environment runtime.

versioning: |
  This library follows [Semantic Versioning](http://semver.org/), but does update [Storage interface](src/main/java/com.google.cloud.storage/Storage.java)
  to introduce new methods which can break your implementations if you implement this interface for testing purposes.

